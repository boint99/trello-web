import Box from '@mui/material/Box'
import ListColumn from './ListColumn/ListColumn'
import { mapOrder } from '~/utils/sorts'
import { DndContext,
  PointerSensor,
  useSensor,
  useSensors,
  MouseSensor,
  TouchSensor,
  DragOverlay,
  defaultDropAnimationSideEffects,
  closestCorners,
  pointerWithin,
  rectIntersection,
  getFirstCollision
} from '@dnd-kit/core'
import { useCallback, useEffect, useRef, useState } from 'react'
import { arrayMove } from '@dnd-kit/sortable'
import Column from './ListColumn/Column/Column'
import Card from './ListColumn/Column/ListCards/Card/Card'
import { cloneDeep, isEmpty } from 'lodash'
import { generatePlaceholdercard } from '~/utils/formatter'
// import { useRect } from '@dnd-kit/core/dist/hooks/utilities'

const ACTIVE_DRAG_ITEM_TYPE = {
  COLUMN: 'ACTIVE_DRAG_ITEM_TYPE_COLUMN',
  CARD: 'ACTIVE_DRAG_ITEM_TYPE_CARD'
}

function BoardContent({ board }) {

  // chuá»™t di chuyá»ƒn 10px thÃ¬ even hoáº¡t Ä‘á»™ng
  const PointerSenser = useSensor(PointerSensor, {
    activationConstraint: { distance: 10 }
  })
  // const sensors = useSensors(PointerSenser)

  const mouseSensor = useSensor(MouseSensor, {
    activationConstraint: { distance: 10 }
  })

  // nháº¥n giá»¯a 250 miligiay vÃ  dung sai cá»§a cáº£m á»©ng (dáº½ lÃ  di chuyá»ƒn /chÃªnh lÃªnh 5px) thÃ¬ kÃ­ch hoáº¡t event
  const touchSensor = useSensor(TouchSensor, {
    activationConstraint: { delay: 250, tolerance: 500 }
  })

  const [orderedColumns, setOrderedColumns] = useState([])
  const sensors = useSensors(mouseSensor, touchSensor )
  const [activeDrapItemId, setActiveDrapItemId] = useState(null)
  const [activeDrapItemType, setActiveDrapItemType] = useState(null)
  const [activeDrapItemData, setActiveDrapItemData] = useState(null)
  const [oldColumWhenDraggingCard, setOldColumWhenDraggingCard] = useState(null)
  const lastOverId = useRef(null)


  useEffect (() => {
    setOrderedColumns(mapOrder(board?.columns, board?.columnOrderIds, '_id'))
  }, [board])

  // tÃ¬m 1 cÃ¡i column theo card id
  const findColumnbyCardId = (cardId) => {
    return orderedColumns.find(column => column?.cards?.map(card => card._id)?.includes(cardId))
  }

  const moveCardBetweenDifferenColums = (
    overColumn,
    activeColumn,
    overCardId,
    active,
    over,
    activeDraggingCardId,
    activeDraggingCardData
  ) => {
    setOrderedColumns (prevColumns => {
      // TÃ¬m vá»‹ trÃ­ (index) cá»§a cÃ¡i overcard trong columm dÃ­ch (nÆ¡i card sáº¯p Ä‘Æ°á»£c tháº£)
      const overCardIndex = overColumn?.cards?.findIndex(card => card._id === overCardId)

      let newCardIndex
      const isBelowOverItem = active.rect.current.translated &&
      active.rect.current.translated.top > over.rect.top + over.rect.height
      const modifiler = isBelowOverItem ? 1 : 0

      newCardIndex = overCardIndex >= 0 ? overCardIndex + modifiler : overColumn?.cards?.length + 1

      // clone máº£ng setOrderedColumns cÅ© ra cÃ¡i má»›i Ä‘á»ƒ sá»­ ly data rá»“i return - cáº­p nháº­t láº¡i setOrderedColumns má»›i
      const nexColumns = cloneDeep(prevColumns)
      const nexActiveColumn = nexColumns.find(column => column._id === activeColumn._id)
      const nextOverColumn = nexColumns.find(column => column._id === overColumn._id)

      // column cÅ©
      if (nexActiveColumn) {
        nexActiveColumn.cards = nexActiveColumn.cards.filter(card => card._id !== activeDraggingCardId)

        // thÃªm Placehodlder card náº¿u  Column rá»—ng
        if (isEmpty(nexActiveColumn.cards)) {
          console.log('card cuá»‘i cÃ¹ng kÃ©o Ä‘i')
          nexActiveColumn.card = [generatePlaceholdercard(nexActiveColumn)]
        }
        nexActiveColumn.cardOrderIds = nexActiveColumn.cards.map(card => card._id)

      }

      // column má»›i
      if (nextOverColumn) {
        // Kiá»ƒm tra card cÃ³ tá»“n táº¡i á»Ÿ overcilumn chÆ°a, náº¿u cÃ³ thÃ¬ cáº§n xÃ³a nÃ³ trÆ°á»›c
        nextOverColumn.cards = nextOverColumn.cards.filter(card => card._id !== activeDraggingCardId)

        // Náº¿u
        const rebuild_activeDraggingCardId = {
          ...activeDraggingCardData,
          columnId: nextOverColumn._id
        }
        // tiáº¿p theo lÃ  thÃªm card kÃ©o vÃ o overColum theo vá»‹ trÃ­ index má»›i
        nextOverColumn.cards = nextOverColumn.cards.toSpliced(newCardIndex, 0, rebuild_activeDraggingCardId)

        //  xÃ³a placehoder card
        nextOverColumn.cards = nextOverColumn.cards.filter(c => !c.FE_placehoderCard)
        nextOverColumn.cardOrderIds = nextOverColumn.cards.map(card => card._id)
      }
      console.log('ðŸš€ ~ moveCardBetweenDifferenColums ~ nextOverColumn:', nextOverColumn)
      return nexColumns
    })
  }
  const handleDragStart = (event) => {
    console.log('ðŸš€ ~ handleDragStart ~ event:', event)
    setActiveDrapItemId(event?.active?.id)
    setActiveDrapItemType(event?.active?.data?.current?.columnId ? ACTIVE_DRAG_ITEM_TYPE.CARD : ACTIVE_DRAG_ITEM_TYPE.COLUMN)
    setActiveDrapItemData(event?.active?.data?.current)

    // Náº¿u keus card thÃ¬ má»›i thá»±c hiá»‡n sÃ©t giÃ¡ trá»‹
    if (event?.active?.data?.current?.columnId) {
      setOldColumWhenDraggingCard(findColumnbyCardId(event?.active?.id))
    }
  }

  // Trigger trong quÃ¡ trÃ¬nh kÃ©o drag má»™t pháº§n tá»­
  const handleDragOver = (event) => {
    const { active, over } = event

    // Náº¿u khÃ´ng tá»“n active vÃ  over thÃ¬ dá»«ng láº¡i
    if (!active || !over) return

    //  activeDraggingCard  lÃ  cÃ¡u card dang Ä‘Æ°á»£c kÃ©o
    const { id: activeDraggingCardId, data: { current: activeDraggingCardData } } = active
    const { id: overCardId } = over
    const activeColumn = findColumnbyCardId(activeDraggingCardId)
    const overColumn = findColumnbyCardId(overCardId)

    // Náº¿u khÃ´ng tá»“n táº¡i 1 trong 2 thÃ¬ ko lÃ m gÃ¬ háº¿t
    if (!activeColumn || !overColumn) return

    if (activeColumn._id !== overColumn._id) {
      moveCardBetweenDifferenColums (
        overColumn,
        activeColumn,
        overCardId,
        active,
        over,
        activeDraggingCardId,
        activeDraggingCardData
      )
    }

    // tÃ¬m 2 cÃ¡i column theo id
  }
  const handleDraghEnd = (event) => {
    const { active, over } = event

    // KhÃ´ng tá»“n táº¡i active hoÄƒc over thÃ¬ ko lÃ m gÃ¬ cáº£
    if (!over || !active) return

    //  xá»­ lÃ½ kÃ©o tháº£ colum
    if (activeDrapItemType === ACTIVE_DRAG_ITEM_TYPE.CARD) {
      //  activeDraggingCard  lÃ  cÃ¡u card dang Ä‘Æ°á»£c kÃ©o
      const { id: activeDraggingCardId, data: { current: activeDraggingCardData } } = active
      const { id: overCardId } = over
      const activeColumn = findColumnbyCardId(activeDraggingCardId)
      const overColumn = findColumnbyCardId(overCardId)
      // Náº¿u khÃ´ng tá»“n táº¡i 1 trong 2 thÃ¬ ko lÃ m gÃ¬ háº¿t
      if (!activeColumn || !overColumn) return

      // HÃ nh Ä‘á»™ng kÃ©o tháº£ card giá»¯a 2 colum khÃ¡c nhau
      // Pháº£i dÃ¹ng tá»›i activeDragItemData.columId (set vÃ  state tá»« bÆ°á»›c handleDragStart) chá»© khÃ´ng pháº£i
      // activeData trong scope handleDragend nÃ y sau khi Ä‘i qua unDragOver tá»›i lÃ  state cá»§a card bá»‹ cáº­p nháº­t 1 láº§n
      if (oldColumWhenDraggingCard._id !== overColumn._id) {

        moveCardBetweenDifferenColums (
          overColumn,
          activeColumn,
          overCardId,
          active,
          over,
          activeDraggingCardId,
          activeDraggingCardData
        )

      } else {
        // HÃ nh Ä‘á»™ng kÃ©o tháº£ card trong cÃ¹ng 1 column
        const oldCardIndex = oldColumWhenDraggingCard?.cards?.findIndex( c => c._id === activeDrapItemId)

        // láº¥y vá»‹ trÃ­ má»›i tá»« over
        const newCardIndex = overColumn?.cards?.findIndex( c => c._id === overCardId)

        const dndOrderedCards = arrayMove(oldColumWhenDraggingCard.cards, oldCardIndex, newCardIndex )
        setOrderedColumns (prevColumn => {
          const nexColums = cloneDeep(prevColumn)

          // Tim tá»›i colum mÃ  chÃºng ta Ä‘ang tháº£
          const targetColumn = nexColums.find(c => c._id === overColumn._id)

          targetColumn.cards = dndOrderedCards
          targetColumn.cardOrderIds = dndOrderedCards.map(card => card._id)

          return nexColums
        })
      }
    }

    //  xá»­ lÃ½ kÃ©o tháº£ colum
    if (activeDrapItemType === ACTIVE_DRAG_ITEM_TYPE.COLUMN) {

      if (active.id !== over.id) {

        // láº¥y vá»‹ trÃ­ cÅ© tá»« active
        const oldColumnIndex = orderedColumns.findIndex( c => c._id === active.id)

        // láº¥y vá»‹ trÃ­ má»›i tá»« over
        const newColumnIndex = orderedColumns.findIndex( c => c._id === over.id)

        const dndOrderedColumns = arrayMove(orderedColumns, oldColumnIndex, newColumnIndex )
        // const dndOrderedColumnsIds = dndOrderedColumns.map((c => c._id))
        setOrderedColumns(dndOrderedColumns)
      }
    }

    setActiveDrapItemId (null)
    setActiveDrapItemType(null)
    setActiveDrapItemData(null)
    setOldColumWhenDraggingCard(null)
  }

  const dropAnmination = {
    sideEffects: defaultDropAnimationSideEffects ({
      styles: {
        active: {
          opacity: 0.5
        }
      }
    })
  }

  const collisionDetectionStrategy = useCallback ((args) => {
    if (activeDrapItemType === activeDrapItemType.COLUMN) {
      return closestCorners({ ...args })
    }
    const pointerInterSections = pointerWithin(args)

    if (!pointerInterSections?.length) return

    // const intersection = !!(pointerInterSections?.length)
    //   ? pointerInterSections : rectIntersection(args)

    let overId = getFirstCollision(pointerInterSections, 'id')

    if (overId) {

      const checkColumn = orderedColumns.find(c => c._id === overId)
      if (checkColumn) {
        overId = closestCorners ({
          ...args,
          droppableContainers: args.droppableContainers.filter(container =>
            container.id !==overId && checkColumn?.cardOrderIds?.includes(container.id))
        })[0]?.id
      }
      lastOverId.current = overId
      return [{ id: overId }]
    }

    return lastOverId.current ? [{ id: lastOverId.current }] : []

  }, [activeDrapItemType, orderedColumns])

  return (
    <DndContext
      // collisionDetection={closestCorners}
      collisionDetection={collisionDetectionStrategy}

      sensors = {sensors}
      onDragStart={handleDragStart}
      onDragOver={handleDragOver}
      onDragEnd={handleDraghEnd}
    >
      <Box sx={{
        bgcolor: (theme) => (theme.palette.mode === 'dark' ? '#34495e' : '#1976d2'),
        width: '100%',
        height: (theme) => theme.trelloCustom.boardContentHeight,
        display: 'flex',
        p: '10px 0'
      }}>
        <ListColumn columns = { orderedColumns }/>
        <DragOverlay drop={dropAnmination}>
          {activeDrapItemType === ACTIVE_DRAG_ITEM_TYPE.COLUMN && <Column column={activeDrapItemData} />}
          {activeDrapItemType === ACTIVE_DRAG_ITEM_TYPE.CARD && <Card card={activeDrapItemData} />}
        </DragOverlay>
      </Box>
    </DndContext>
  )
}

export default BoardContent